// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionType {
  income
  expense
}

enum SubscriptionPlanType {
  monthly
  annual
}

enum SubscriptionStatus {
  active
  canceled
  past_due
  trialing
}

enum PaymentStatus {
  succeeded
  pending
  failed
}

enum SupportTicketStatus {
  open
  in_progress
  resolved
}

enum ResponderType {
  user
  admin
}

enum ThemePreference {
  light
  dark
  system
}

enum BudgetPeriod {
  monthly
  yearly
}

enum UserRole {
  admin
  premium
  standard
  trial
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  full_name         String
  avatar_url        String?
  role              UserRole           @default(trial)
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  last_login_at     DateTime?
  stripeId String?           @unique
  clerk_id          String?            @unique
  accounts          Account[]
  categories        Category[]
  transactions      Transaction[]
  subscriptions     Subscription[]
  payments          Payment[]
  support_tickets   SupportTicket[]
  preference        UserPreference?
  monthly_summaries MonthlyFinancialSummary[]
  budget_goals      BudgetGoal[]
}

model Account {
  id          String        @id @default(uuid())
  user_id     String
  name        String
  balance     Decimal       @db.Decimal(15, 2)
  color       String
  is_archived Boolean       @default(false)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  
  user        User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model Category {
  id          String           @id @default(uuid())
  user_id     String
  name        String
  type        TransactionType
  icon        String
  color       String
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  is_default  Boolean          @default(false)
  
  user        User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  transactions Transaction[]
  budget_goals BudgetGoal[]
}

model Transaction {
  id          String          @id @default(uuid())
  user_id     String
  account_id  String
  category_id String?
  amount      Decimal         @db.Decimal(15, 2)
  description String
  date        DateTime
  type        TransactionType
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt
  
  user        User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  account     Account         @relation(fields: [account_id], references: [id], onDelete: Cascade)
  category    Category?       @relation(fields: [category_id], references: [id], onDelete: SetNull)
}

model Subscription {
  id                   String               @id @default(uuid())
  user_id              String
  stripe_subscription_id String?            @unique
  plan_type            SubscriptionPlanType
  status               SubscriptionStatus
  current_period_start DateTime
  current_period_end   DateTime
  created_at           DateTime             @default(now())
  updated_at           DateTime             @updatedAt
  canceled_at          DateTime?
  
  user                 User                 @relation(fields: [user_id], references: [id], onDelete: Cascade)
  payments             Payment[]
}

model Payment {
  id               String        @id @default(uuid())
  user_id          String
  subscription_id  String
  stripe_payment_id String
  amount           Decimal       @db.Decimal(15, 2)
  currency         String
  status           PaymentStatus
  payment_method   String
  invoice_url      String?
  created_at       DateTime      @default(now())
  
  user             User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  subscription     Subscription  @relation(fields: [subscription_id], references: [id], onDelete: Cascade)
}

model SupportTicket {
  id          String              @id @default(uuid())
  user_id     String
  subject     String
  message     String              @db.Text
  status      SupportTicketStatus @default(open)
  created_at  DateTime            @default(now())
  updated_at  DateTime            @updatedAt
  resolved_at DateTime?
  
  user        User                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  responses   SupportResponse[]
}

model SupportResponse {
  id             String        @id @default(uuid())
  ticket_id      String
  responder_type ResponderType
  message        String        @db.Text
  created_at     DateTime      @default(now())
  
  ticket         SupportTicket @relation(fields: [ticket_id], references: [id], onDelete: Cascade)
}

model UserPreference {
  id                  String           @id @default(uuid())
  user_id             String           @unique
  theme               ThemePreference  @default(system)
  language            String           @default("pt-BR")
  currency            String           @default("BRL")
  notification_settings Json?
  created_at          DateTime         @default(now())
  updated_at          DateTime         @updatedAt
  
  user                User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model MonthlyFinancialSummary {
  id         String   @id @default(uuid())
  user_id    String
  month_year String
  income     Decimal  @db.Decimal(15, 2)
  expense    Decimal  @db.Decimal(15, 2)
  balance    Decimal  @db.Decimal(15, 2)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, month_year])
}

model BudgetGoal {
  id          String       @id @default(uuid())
  user_id     String
  category_id String?
  name        String
  amount      Decimal      @db.Decimal(15, 2)
  period      BudgetPeriod
  start_date  DateTime
  end_date    DateTime?
  is_active   Boolean      @default(true)
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  
  user        User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  category    Category?    @relation(fields: [category_id], references: [id], onDelete: SetNull)
}
