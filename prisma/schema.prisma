// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  name              String
  email             String             @unique
  password          String
  avatarUrl         String?
  createdAt         DateTime           @default(now())
  stripeCustomerId  String?            @unique
  
  accounts          Account[]
  categories        Category[]
  transactions      Transaction[]
  subscriptions     Subscription[]
  supportTickets    SupportTicket[]
}

model Account {
  id          String        @id @default(uuid())
  userId      String
  name        String
  balance     Float         @default(0)
  color       String
  isArchived  Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model Category {
  id          String        @id @default(uuid())
  userId      String
  name        String
  type        String
  icon        String
  color       String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model Transaction {
  id          String    @id @default(uuid())
  userId      String
  accountId   String
  categoryId  String?
  amount      Float
  description String
  date        DateTime
  type        String
  status      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  account     Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
}

model Subscription {
  id                  String    @id @default(uuid())
  userId              String
  stripeSubscriptionId String?  @unique
  plan                String
  status              String
  currentPeriodStart  DateTime
  currentPeriodEnd    DateTime
  cancelAtPeriodEnd   Boolean   @default(false)
  priceId             String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SupportTicket {
  id          String    @id @default(uuid())
  userId      String
  subject     String
  message     String
  priority    String
  status      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
